apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.name }}_server
  labels:
    name: {{ .Chart.name }}_server
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0 
  template:
    metadata:
      labels:
        app: {{ .Chart.name }}_server
    spec:
      containers:
      - name: {{ .Chart.name }}_server
        image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        env:
        - name: FLASK_ENV
          value: {{ .Values.environment }}
        - name: APP_SETTINGS
          value: "project.config.DevelopmentConfig"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql
              key: {{ .Values.secrets.postgresql.userKey }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql
              key: {{ .Values.secrets.postgresql.passwordKey }}
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql
              key: {{ .Values.secrets.postgresql.databaseKey }}
        resources:
          requests: 
            memory: {{ .Values.resources.requests.memory }}
            cpu: {{ .Values.resources.requests.cpu }}
          limits:
            memory: {{ .Values.resources.limits.memory }}
            cpu: {{ .Values.resources.limits.cpu }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8080
          failureThreshold: 3 
          initialDelaySeconds: 3
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
      restartPolicy: Always