bookish-meme-infrastructure/gcp-terraform/gke on  task4-tf-github-actions [?] using ☁️  bookish-meme/bookish-meme
➜ terraform plan --var-file=dev.tfvars --out=dev_plan_outputs.json
var.project_id
  The project ID to host the cluster in

  Enter a value: bookish-meme


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # local_file.kubeconfig will be created
  + resource "local_file" "kubeconfig" {
      + content              = (sensitive)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "kubeconfig-dev"
      + id                   = (known after apply)
    }

  # module.gke.google_container_cluster.primary will be created
  + resource "google_container_cluster" "primary" {
      + cluster_ipv4_cidr           = (known after apply)
      + datapath_provider           = (known after apply)
      + default_max_pods_per_node   = 110
      + enable_binary_authorization = false
      + enable_intranode_visibility = (known after apply)
      + enable_kubernetes_alpha     = false
      + enable_legacy_abac          = false
      + enable_shielded_nodes       = true
      + endpoint                    = (known after apply)
      + id                          = (known after apply)
      + instance_group_urls         = (known after apply)
      + label_fingerprint           = (known after apply)
      + location                    = "europe-west1"
      + logging_service             = "logging.googleapis.com/kubernetes"
      + master_version              = (known after apply)
      + min_master_version          = "1.21.4-gke.2300"
      + monitoring_service          = "monitoring.googleapis.com/kubernetes"
      + name                        = "bookish-meme-dev"
      + network                     = "projects/bookish-meme/global/networks/gke-network-dev"
      + networking_mode             = (known after apply)
      + node_locations              = (known after apply)
      + node_version                = (known after apply)
      + operation                   = (known after apply)
      + private_ipv6_google_access  = (known after apply)
      + project                     = "bookish-meme"
      + remove_default_node_pool    = false
      + self_link                   = (known after apply)
      + services_ipv4_cidr          = (known after apply)
      + subnetwork                  = "projects/bookish-meme/regions/europe-west1/subnetworks/gke-subnet-dev"
      + tpu_ipv4_cidr_block         = (known after apply)

      + addons_config {
          + cloudrun_config {
              + disabled           = (known after apply)
              + load_balancer_type = (known after apply)
            }

          + horizontal_pod_autoscaling {
              + disabled = true
            }

          + http_load_balancing {
              + disabled = false
            }

          + network_policy_config {
              + disabled = true
            }
        }

      + authenticator_groups_config {
          + security_group = (known after apply)
        }

      + cluster_autoscaling {
          + enabled = false

          + auto_provisioning_defaults {
              + oauth_scopes    = (known after apply)
              + service_account = (known after apply)
            }
        }

      + database_encryption {
          + state = "DECRYPTED"
        }

      + default_snat_status {
          + disabled = (known after apply)
        }

      + ip_allocation_policy {
          + cluster_ipv4_cidr_block       = (known after apply)
          + cluster_secondary_range_name  = "ip-range-pods"
          + services_ipv4_cidr_block      = (known after apply)
          + services_secondary_range_name = "ip-range-services"
        }

      + logging_config {
          + enable_components = (known after apply)
        }

      + maintenance_policy {
          + daily_maintenance_window {
              + duration   = (known after apply)
              + start_time = "05:00"
            }
        }

      + master_auth {
          + client_certificate     = (known after apply)
          + client_key             = (sensitive value)
          + cluster_ca_certificate = (known after apply)

          + client_certificate_config {
              + issue_client_certificate = false
            }
        }

      + monitoring_config {
          + enable_components = (known after apply)
        }

      + network_policy {
          + enabled = false
        }

      + node_config {
          + disk_size_gb      = (known after apply)
          + disk_type         = (known after apply)
          + guest_accelerator = (known after apply)
          + image_type        = (known after apply)
          + labels            = (known after apply)
          + local_ssd_count   = (known after apply)
          + machine_type      = (known after apply)
          + metadata          = (known after apply)
          + min_cpu_platform  = (known after apply)
          + oauth_scopes      = (known after apply)
          + preemptible       = (known after apply)
          + service_account   = (known after apply)
          + tags              = (known after apply)
          + taint             = (known after apply)

          + shielded_instance_config {
              + enable_integrity_monitoring = (known after apply)
              + enable_secure_boot          = (known after apply)
            }

          + workload_metadata_config {
              + node_metadata = (known after apply)
            }
        }

      + node_pool {
          + initial_node_count  = 0
          + instance_group_urls = (known after apply)
          + max_pods_per_node   = (known after apply)
          + name                = "default-pool"
          + name_prefix         = (known after apply)
          + node_count          = (known after apply)
          + node_locations      = (known after apply)
          + version             = (known after apply)

          + management {
              + auto_repair  = (known after apply)
              + auto_upgrade = (known after apply)
            }

          + node_config {
              + disk_size_gb      = (known after apply)
              + disk_type         = (known after apply)
              + guest_accelerator = (known after apply)
              + image_type        = (known after apply)
              + labels            = (known after apply)
              + local_ssd_count   = (known after apply)
              + machine_type      = (known after apply)
              + metadata          = (known after apply)
              + oauth_scopes      = (known after apply)
              + preemptible       = false
              + service_account   = (known after apply)
              + taint             = (known after apply)

              + shielded_instance_config {
                  + enable_integrity_monitoring = (known after apply)
                  + enable_secure_boot          = (known after apply)
                }

              + workload_metadata_config {
                  + node_metadata = "GKE_METADATA_SERVER"
                }
            }

          + upgrade_settings {
              + max_surge       = (known after apply)
              + max_unavailable = (known after apply)
            }
        }

      + release_channel {
          + channel = (known after apply)
        }

      + timeouts {
          + create = "45m"
          + delete = "45m"
          + update = "45m"
        }

      + vertical_pod_autoscaling {
          + enabled = false
        }

      + workload_identity_config {
          + identity_namespace = "bookish-meme.svc.id.goog"
        }
    }

  # module.gke.google_container_node_pool.pools["node-pool"] will be created
  + resource "google_container_node_pool" "pools" {
      + cluster             = "bookish-meme-dev"
      + id                  = (known after apply)
      + initial_node_count  = 1
      + instance_group_urls = (known after apply)
      + location            = "europe-west1"
      + max_pods_per_node   = (known after apply)
      + name                = "node-pool"
      + name_prefix         = (known after apply)
      + node_count          = (known after apply)
      + node_locations      = [
          + "europe-west1-b",
          + "europe-west1-c",
          + "europe-west1-d",
        ]
      + operation           = (known after apply)
      + project             = "bookish-meme"
      + version             = "1.21.4-gke.2300"

      + autoscaling {
          + max_node_count = 3
          + min_node_count = 1
        }

      + management {
          + auto_repair  = true
          + auto_upgrade = true
        }

      + node_config {
          + disk_size_gb      = 30
          + disk_type         = "pd-standard"
          + guest_accelerator = []
          + image_type        = "COS"
          + labels            = {
              + "cluster_name" = "bookish-meme-dev"
              + "node_pool"    = "node-pool"
            }
          + local_ssd_count   = 0
          + machine_type      = "e2-medium"
          + metadata          = {
              + "cluster_name"             = "bookish-meme-dev"
              + "disable-legacy-endpoints" = "true"
              + "node_pool"                = "node-pool"
            }
          + oauth_scopes      = [
              + "https://www.googleapis.com/auth/cloud-platform",
            ]
          + preemptible       = false
          + service_account   = (known after apply)
          + tags              = [
              + "gke-bookish-meme-dev",
              + "gke-bookish-meme-dev-node-pool",
            ]
          + taint             = (known after apply)

          + shielded_instance_config {
              + enable_integrity_monitoring = true
              + enable_secure_boot          = false
            }

          + workload_metadata_config {
              + node_metadata = "GKE_METADATA_SERVER"
            }
        }

      + timeouts {
          + create = "45m"
          + delete = "45m"
          + update = "45m"
        }

      + upgrade_settings {
          + max_surge       = (known after apply)
          + max_unavailable = (known after apply)
        }
    }

  # module.gke.google_project_iam_member.cluster_service_account-log_writer[0] will be created
  + resource "google_project_iam_member" "cluster_service_account-log_writer" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "bookish-meme"
      + role    = "roles/logging.logWriter"
    }

  # module.gke.google_project_iam_member.cluster_service_account-metric_writer[0] will be created
  + resource "google_project_iam_member" "cluster_service_account-metric_writer" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "bookish-meme"
      + role    = "roles/monitoring.metricWriter"
    }

  # module.gke.google_project_iam_member.cluster_service_account-monitoring_viewer[0] will be created
  + resource "google_project_iam_member" "cluster_service_account-monitoring_viewer" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "bookish-meme"
      + role    = "roles/monitoring.viewer"
    }

  # module.gke.google_project_iam_member.cluster_service_account-resourceMetadata-writer[0] will be created
  + resource "google_project_iam_member" "cluster_service_account-resourceMetadata-writer" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "bookish-meme"
      + role    = "roles/stackdriver.resourceMetadata.writer"
    }

  # module.gke.google_service_account.cluster_service_account[0] will be created
  + resource "google_service_account" "cluster_service_account" {
      + account_id   = (known after apply)
      + disabled     = false
      + display_name = "Terraform-managed service account for cluster bookish-meme-dev"
      + email        = (known after apply)
      + id           = (known after apply)
      + name         = (known after apply)
      + project      = "bookish-meme"
      + unique_id    = (known after apply)
    }

  # module.gke.random_shuffle.available_zones will be created
  + resource "random_shuffle" "available_zones" {
      + id           = (known after apply)
      + input        = [
          + "europe-west1-b",
          + "europe-west1-c",
          + "europe-west1-d",
        ]
      + result       = (known after apply)
      + result_count = 3
    }

  # module.gke.random_string.cluster_service_account_suffix will be created
  + resource "random_string" "cluster_service_account_suffix" {
      + id          = (known after apply)
      + length      = 4
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # module.gke_auth.data.google_client_config.provider will be read during apply
  # (config refers to values not yet known)
 <= data "google_client_config" "provider"  {
      + access_token = (sensitive value)
      + id           = (known after apply)
      + project      = (known after apply)
      + region       = (known after apply)
      + zone         = (known after apply)
    }

  # module.gke_auth.data.google_container_cluster.gke_cluster will be read during apply
  # (config refers to values not yet known)
 <= data "google_container_cluster" "gke_cluster"  {
      + addons_config                     = (known after apply)
      + authenticator_groups_config       = (known after apply)
      + cluster_autoscaling               = (known after apply)
      + cluster_ipv4_cidr                 = (known after apply)
      + database_encryption               = (known after apply)
      + datapath_provider                 = (known after apply)
      + default_max_pods_per_node         = (known after apply)
      + default_snat_status               = (known after apply)
      + description                       = (known after apply)
      + enable_autopilot                  = (known after apply)
      + enable_binary_authorization       = (known after apply)
      + enable_intranode_visibility       = (known after apply)
      + enable_kubernetes_alpha           = (known after apply)
      + enable_legacy_abac                = (known after apply)
      + enable_shielded_nodes             = (known after apply)
      + enable_tpu                        = (known after apply)
      + endpoint                          = (known after apply)
      + id                                = (known after apply)
      + initial_node_count                = (known after apply)
      + instance_group_urls               = (known after apply)
      + ip_allocation_policy              = (known after apply)
      + label_fingerprint                 = (known after apply)
      + location                          = "europe-west1"
      + logging_config                    = (known after apply)
      + logging_service                   = (known after apply)
      + maintenance_policy                = (known after apply)
      + master_auth                       = (known after apply)
      + master_authorized_networks_config = (known after apply)
      + master_version                    = (known after apply)
      + min_master_version                = (known after apply)
      + monitoring_config                 = (known after apply)
      + monitoring_service                = (known after apply)
      + name                              = "bookish-meme-dev"
      + network                           = (known after apply)
      + network_policy                    = (known after apply)
      + networking_mode                   = (known after apply)
      + node_config                       = (known after apply)
      + node_locations                    = (known after apply)
      + node_pool                         = (known after apply)
      + node_version                      = (known after apply)
      + operation                         = (known after apply)
      + pod_security_policy_config        = (known after apply)
      + private_cluster_config            = (known after apply)
      + private_ipv6_google_access        = (known after apply)
      + project                           = "bookish-meme"
      + release_channel                   = (known after apply)
      + remove_default_node_pool          = (known after apply)
      + resource_labels                   = (known after apply)
      + resource_usage_export_config      = (known after apply)
      + self_link                         = (known after apply)
      + services_ipv4_cidr                = (known after apply)
      + subnetwork                        = (known after apply)
      + tpu_ipv4_cidr_block               = (known after apply)
      + vertical_pod_autoscaling          = (known after apply)
      + workload_identity_config          = (known after apply)
    }

  # module.gke_auth.data.template_file.kubeconfig will be read during apply
  # (config refers to values not yet known)
 <= data "template_file" "kubeconfig"  {
      + id       = (known after apply)
      + rendered = (known after apply)
      + template = <<-EOT
            apiVersion: v1
            clusters:
            - cluster:
                certificate-authority-data: ${cluster_ca_certificate}
                server: https://${endpoint}
              name: ${context}
            contexts:
            - context:
                cluster: ${context}
                user: ${context}
              name: ${context}
            current-context: ${context}
            kind: Config
            preferences: {}
            users:
            - name: ${context}
              user:
                token: ${token}
        EOT
      + vars     = {
          + "cluster_ca_certificate" = (known after apply)
          + "context"                = "bookish-meme-dev"
          + "endpoint"               = (known after apply)
          + "token"                  = (sensitive)
        }
    }

  # module.gcp-network.module.subnets.google_compute_subnetwork.subnetwork["europe-west1/gke-subnet-dev"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.10.0.0/16"
      + name                       = "gke-subnet-dev"
      + network                    = "gke-network-dev"
      + private_ip_google_access   = false
      + private_ipv6_google_access = (known after apply)
      + project                    = "bookish-meme"
      + purpose                    = (known after apply)
      + region                     = "europe-west1"
      + secondary_ip_range         = [
          + {
              + ip_cidr_range = "10.20.0.0/16"
              + range_name    = "ip-range-pods"
            },
          + {
              + ip_cidr_range = "10.30.0.0/16"
              + range_name    = "ip-range-services"
            },
        ]
      + self_link                  = (known after apply)
    }

  # module.gcp-network.module.vpc.google_compute_network.network will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks         = false
      + delete_default_routes_on_create = false
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + mtu                             = 0
      + name                            = "gke-network-dev"
      + project                         = "bookish-meme"
      + routing_mode                    = "GLOBAL"
      + self_link                       = (known after apply)
    }

  # module.gke.module.gcloud_delete_default_kube_dns_configmap.module.gcloud_kubectl.null_resource.module_depends_on[0] will be created
  + resource "null_resource" "module_depends_on" {
      + id       = (known after apply)
      + triggers = {
          + "value" = "2"
        }
    }

Plan: 13 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cluster_name = "bookish-meme-dev"

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: dev_plan_outputs.json

To perform exactly these actions, run the following command to apply:
    terraform apply "dev_plan_outputs.json"
(runItOnCloud:default)
bookish-meme-infrastructure/gcp-terraform/gke on  task4-tf-github-actions [?] using ☁️  bookish-meme/bookish-meme took 12s
➜